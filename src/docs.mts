import { remark } from "remark";
import type { Code, Root } from "mdast";
import { readFileSync, writeFileSync, mkdirSync, existsSync } from "fs";
// @ts-ignore
import flatmap from "unist-util-flatmap";
import { globby } from "globby";
import { join, dirname } from "path";
import { exec } from "child_process";
// @ts-ignore
import prettier from "prettier";

const SOURCE_DOCS_DIR = 'src/docs/';
const FINAL_DOCS_DIR = 'docs/';
const AUTOGENERATED_TEXT =
  "# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT. Please edit the corresponding file in src/docs.";

const verifyOnly = process.argv.includes("--verify");
const git = process.argv.includes("--git");

let filesWereChanged = false;


/**
 * Given a source file name and path, return the documentation destination full path and file name
 * Create the destination path if it does not already exist.
 * Possible Improvement: combine with lint-staged to only copy files that have changed
 *
 * @param file {string} name of the file (including full path)
 * @returns {string} name of the file with the path changed from src/docs to docs
 */
const prepareOutFile = (file: string): string => {
  const outFile = join(FINAL_DOCS_DIR, file.replace(SOURCE_DOCS_DIR, ""));
  mkdirSync(dirname(outFile), { recursive: true });
  return outFile;
};

/**
 * Verify that a file was changed and (potentially) write the new contents out to the file. Log a message to the console
 * If the file was not changed, do nothing. (No message is logged to the console.)
 *
 * @param file {string} name of the file that will be verified
 * @param content {string} new contents for the file
 */
const verifyAndCopy = (file: string, content?: string) => {
  const outFile = prepareOutFile(file);
  const existingBuffer = existsSync(outFile) ? readFileSync(outFile) : Buffer.from("#NEW FILE#");
  const newBuffer = content ? Buffer.from(content) : readFileSync(file);
  if (existingBuffer.equals(newBuffer)) {
    // Files are same, skip.
    return;
  }
  let changeMsg = 'changed';
  if (verifyOnly) {
    changeMsg = 'to be changed';
  }
  let logMsg = `  File ${changeMsg}: ${outFile}`

  filesWereChanged = true;
  if (!verifyOnly) {
    writeFileSync(outFile, newBuffer);
    logMsg += ' ...and copied to /docs'
  }
  console.log(logMsg);
};

/**
 * Transform a markdown file and write the transformed file to the directory for published documentation
 *   1. add a `mermaid-example` block before every `mermaid` or `mmd` block
 *      On the docsify site (one place where the documentation is published), this will show the code used for the mermaid diagram
 *   2. add the text that says the file is automatically generated
 *   3. use prettier to format the file
 *   Verify that the file has been changed and write out the changes
 *
 * @param file {string} name of the file that will be verified
 */
const transform = (file: string) => {
  const doc = readFileSync(file, "utf8");
  const ast: Root = remark.parse(doc);
  const out = flatmap(ast, (c: Code) => {
    if (c.type !== "code" || !c.lang?.startsWith("mermaid")) {
      return [c];
    }
    if (c.lang === "mermaid" || c.lang === "mmd") {
      c.lang = "mermaid-example";
    }
    return [c, Object.assign({}, c, { lang: "mermaid" })];
  });

  // Add the AUTOGENERATED_TEXT to the start of the file
  const transformed = `${AUTOGENERATED_TEXT}\n${remark.stringify(out)}`;

  verifyAndCopy(
    file,
    prettier.format(transformed, {
      parser: "markdown",
      useTabs: false,
      tabWidth: 2,
      endOfLine: "auto",
      printWidth: 100,
      singleQuote: true
    })
  );
};

(async () => {
  const mdFiles = await globby(["./src/docs/**/*.md"], { dot: true });
  mdFiles.forEach(transform);
  const nonMDFiles = await globby(["src/docs/**", "!**/*.md"], { dot: true });
  nonMDFiles.forEach((file) => {
    verifyAndCopy(file);
  });
  if (filesWereChanged) {
    if (verifyOnly) {
      console.log(
        "Changes detected in files in `docs`. Please run `yarn docs:build` after making changes to 'src/docs' to update the `docs` folder."
      );
      process.exit(1);
    }
    if (git) {
      console.log("Adding changes in docs folder to git");
      exec("git add docs");
    }
  }
})();
