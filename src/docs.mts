import { remark } from 'remark';
import type { Code, Root } from 'mdast';
import { readFileSync, writeFileSync, mkdirSync, copyFileSync, existsSync } from 'fs';
// @ts-ignore
import flatmap from 'unist-util-flatmap';
import { globby } from 'globby';
import { join, dirname } from 'path';

let fileChanged = false;
// Possible Improvement: combine with lint-staged to only copy files that have changed
const prepareOutFile = (file: string): string => {
  const outFile = join('docs', file.replace('src/docs/', ''));
  mkdirSync(dirname(outFile), { recursive: true });
  return outFile;
};

const verifyAndCopy = (file: string, content?: string) => {
  const outFile = prepareOutFile(file);
  const existing = existsSync(outFile) ? readFileSync(outFile) : Buffer.from('#NEW FILE#');
  if (content !== undefined) {
    if (!existing.equals(Buffer.from(content))) {
      console.log(`Updating ${outFile}`);
      writeFileSync(outFile, content);
      fileChanged = true;
    }
  } else {
    const newFile = readFileSync(file);
    if (!existing.equals(newFile)) {
      console.log(`Copying ${file} to ${outFile}`);
      writeFileSync(outFile, newFile);
      fileChanged = true;
    }
  }
};

const transform = (file: string) => {
  const doc = readFileSync(file, 'utf8');
  const ast: Root = remark.parse(doc);
  const out = flatmap(ast, (c: Code) => {
    if (c.type !== 'code' || !c.lang?.startsWith('mermaid')) {
      return [c];
    }
    if (c.lang === 'mermaid' || c.lang === 'mmd') {
      c.lang = 'mermaid-example';
    }
    return [c, Object.assign({}, c, { lang: 'mermaid' })];
  });

  const transformed = `# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT. Please edit corresponding file in src/docs.\n${remark.stringify(
    out
  )}`;
  verifyAndCopy(file, transformed);
};

(async () => {
  const mdFiles = await globby(['./src/docs/**/*.md']);
  mdFiles.forEach(transform);
  const nonMDFiles = await globby(['src/docs/**', '!**/*.md']);
  nonMDFiles.forEach((file) => {
    verifyAndCopy(file);
  });
  if (fileChanged) {
    console.log('Please commit the changes to the docs folder');
    process.exit(1);
  }
})();
